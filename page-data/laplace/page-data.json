{"componentChunkName":"component---src-templates-section-js","path":"/laplace","result":{"data":{"mdx":{"slug":"signal-processing/laplace-transform","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _templateObject8() {\n  var data = _taggedTemplateLiteral([\"F(s) = int_0^infty e^{-st}sin(at)dt = \\frac{a}{s^2 + a^2}\"], [\"F(s) = \\\\int_0^\\\\infty e^{-st}\\\\sin(at)dt = \\\\frac{a}{s^2 + a^2}\"]);\n\n  _templateObject8 = function _templateObject8() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject7() {\n  var data = _taggedTemplateLiteral([\"f(t) = sin(at)\"], [\"f(t) = \\\\sin(at)\"]);\n\n  _templateObject7 = function _templateObject7() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject6() {\n  var data = _taggedTemplateLiteral([\"F(s) = int_0^infty e^{-st}e^{at}dt = \\frac{1}{s-a}, \\text{ if } s > a.\"], [\"F(s) = \\\\int_0^\\\\infty e^{-st}e^{at}dt = \\\\frac{1}{s-a}, \\\\text{ if } s > a.\"]);\n\n  _templateObject6 = function _templateObject6() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject5() {\n  var data = _taggedTemplateLiteral([\"f(t) = e^{at}\"]);\n\n  _templateObject5 = function _templateObject5() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject4() {\n  var data = _taggedTemplateLiteral([\"F(s) = int_0^infty e^{-st}f(t)dt = \\frac{1}{s}, \\text{ if } s > 0.\"], [\"F(s) = \\\\int_0^\\\\infty e^{-st}f(t)dt = \\\\frac{1}{s}, \\\\text{ if } s > 0.\"]);\n\n  _templateObject4 = function _templateObject4() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject3() {\n  var data = _taggedTemplateLiteral([\"f(t) = 1\"]);\n\n  _templateObject3 = function _templateObject3() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject2() {\n  var data = _taggedTemplateLiteral([\"mathcal{L}{f(t)} = F(s) = int_0^infty e^{-st}f(t)dt\"], [\"\\\\mathcal{L}\\\\{f(t)\\\\} = F(s) = \\\\int_0^\\\\infty e^{-st}f(t)dt\"]);\n\n  _templateObject2 = function _templateObject2() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"mathcal{L}\"], [\"\\\\mathcal{L}\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Laplace Transform Reference Table\",\n  \"date\": \"2020-07-03\",\n  \"slug\": \"laplace\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar InlineMath = makeShortcode(\"InlineMath\");\nvar BlockMath = makeShortcode(\"BlockMath\");\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", null, \"Laplace Transform Reference Table\"), mdx(\"p\", null, \"The Laplace transform \", mdx(InlineMath, {\n    math: String.raw(_templateObject()),\n    mdxType: \"InlineMath\"\n  }), \" of a function \", mdx(InlineMath, {\n    math: \"f(t)\",\n    mdxType: \"InlineMath\"\n  }), \" is defined as follows:\"), mdx(BlockMath, {\n    math: String.raw(_templateObject2()),\n    mdxType: \"BlockMath\"\n  }), mdx(\"table\", {\n    className: \"laplace\"\n  }, mdx(\"thead\", null, mdx(\"th\", null, \"Original Function\"), mdx(\"th\", null, \"Laplace Transform\")), mdx(\"tr\", null, mdx(\"td\", {\n    className: \"col1\"\n  }, mdx(BlockMath, {\n    math: String.raw(_templateObject3()),\n    mdxType: \"BlockMath\"\n  })), mdx(\"td\", {\n    className: \"col2\"\n  }, mdx(BlockMath, {\n    math: String.raw(_templateObject4()),\n    mdxType: \"BlockMath\"\n  }))), mdx(\"tr\", null, mdx(\"td\", {\n    className: \"col1\"\n  }, mdx(BlockMath, {\n    math: String.raw(_templateObject5()),\n    mdxType: \"BlockMath\"\n  })), mdx(\"td\", {\n    className: \"col2\"\n  }, mdx(BlockMath, {\n    math: String.raw(_templateObject6()),\n    mdxType: \"BlockMath\"\n  }))), mdx(\"tr\", null, mdx(\"td\", {\n    className: \"col1\"\n  }, mdx(BlockMath, {\n    math: String.raw(_templateObject7()),\n    mdxType: \"BlockMath\"\n  })), mdx(\"td\", {\n    className: \"col2\"\n  }, mdx(BlockMath, {\n    math: String.raw(_templateObject8()),\n    mdxType: \"BlockMath\"\n  })))));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"title":"Laplace Transform Reference Table","slug":"laplace"}}},"pageContext":{"slug":"signal-processing/laplace-transform"}}}